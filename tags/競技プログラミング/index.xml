<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>競技プログラミング on JokenOffline(電子版)</title>
    <link>https://kyumina.github.io/jokenoffline2017/tags/%E7%AB%B6%E6%8A%80%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/index.xml</link>
    <description>Recent content in 競技プログラミング on JokenOffline(電子版)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <atom:link href="https://kyumina.github.io/jokenoffline2017/tags/%E7%AB%B6%E6%8A%80%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>はじめてのアルゴリズム</title>
      <link>https://kyumina.github.io/jokenoffline2017/archives/2017/04/07/first_step_arugo/</link>
      <pubDate>Fri, 07 Apr 2017 16:42:28 +0900</pubDate>
      
      <guid>https://kyumina.github.io/jokenoffline2017/archives/2017/04/07/first_step_arugo/</guid>
      <description>

&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;こんにちは．情報工学科3年（新4年）のDaisukeといいます．2年生の冬に日本情報オリンピック本選に出場したことをきっかけにアルゴリズムに興味を持ち3年生の春にJokenに入りました．3年生の夏には古月君とクラスメイトの3人でスーパーコンピューティングコンテストというアルゴリズムを競う大会に出場し，3位に入賞することができました．このようなアルゴリズムを考えてプログラミングするというジャンルのプログラミングを競技プログラミング（以下，競プロ）と呼びます．競プロはプログラミングの知識がほとんど入門レベルでも始めることができるので，プログラミング初心者の方が何か挑戦してみたいと考えるなら，是非競プロについて勉強してみるのはいかがでしょうか．この記事では競プロの説明と，アルゴリズムの例として二分探索法というアルゴリズムについて解説します．&lt;/p&gt;

&lt;h2 id=&#34;about-競プロ&#34;&gt;about 競プロ&lt;/h2&gt;

&lt;h3 id=&#34;競プロの宣伝&#34;&gt;競プロの宣伝&lt;/h3&gt;

&lt;p&gt;本題の前に実際に競プロってどういう大会があるのかについて説明します．競プロはオンラインの大会や，どこかの会場で行う大会もあります．オンラインの大会でもAtCoder(&lt;a href=&#34;https://atcoder.jp/&#34;&gt;https://atcoder.jp/&lt;/a&gt; )というホームページの大会は月に何度かというペースで行っており，だれでも参加することができるのでおすすめです．初心者向けの大会があり，時間も100分で4問なので参加しやすいです．また会場で行う大会は有名なのはやはり日本情報オリンピックです．予選はオンラインで行われますが，本選は関東地方の会場で行われます．本選は4時間で5問解きます．またスーパーコンピューティングコンテストも阪大で行われました．スーパーコンピューティングコンテストは問題が与えられてから2日半くらいの時間で1問解きます．このような会場で行う大会の最大のメリットは，同じくらいの年齢の，同じような興味を持つ人と会うことができることです．しかも名門校が多くてその中に交じれる機会はそうないと思います．僕はとても楽しく，貴重な経験だったと思います．&lt;/p&gt;

&lt;p&gt;ちなみに言語はC・C++が良いです．理由は，情報オリンピック本選ではC言語が強制されるのと，それによって競プロの本もまたC言語で書かれていることが多いからです．&lt;/p&gt;

&lt;h3 id=&#34;競プロのアルゴリズム&#34;&gt;競プロのアルゴリズム&lt;/h3&gt;

&lt;p&gt;この記事を読んでいる人はそのアルゴリズムというもののイメージがついていると思います．僕は，日本語では「方法」に近いイメージを持っていました．Googleで「アルゴリズム」と検索してみると&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;アルゴリズム（英: algorithm [ˈælgəˌrɪðəm]）とは、数学、コンピューティング、言語学、あるいは関連する分野において、問題を解くための手順を定式化した形で表現したものを言う。「 算法」と訳されることもある。&lt;/p&gt;

&lt;p&gt;アルゴリズム - Wikipedia&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/アルゴリズム&#34;&gt;https://ja.wikipedia.org/wiki/アルゴリズム&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;と書いてあります．ここで重要なのは，定式化した形という部分です．なぜなら曖昧な方法を考えていてはプログラムを書くことができないからです．何を計算するのか，何を繰り返すのかを具体的に考える必要があります．&lt;/p&gt;

&lt;p&gt;競プロの世界では一般的に速く計算をすることができるアルゴリズムを良いアルゴリズムとしています．アルゴリズムの速さを時間計算量と呼びます．時間計算量はプログラムを実行したときの繰り返しの数のことです．オーダー記法という方法で示すことができるので興味のある方は調べてみてください．とりあえず，時間計算量が小さい（＝繰り返しが少ない）アルゴリズムほど良いと言えます．同じ問題を解くのに1万回の繰り返しで済むアルゴリズムと1億回の繰り返しが必要なアルゴリズムでは前者のアルゴリズムのほうが良いということです．目安ですが繰り返しの回数が億になると実行するのに秒単位の時間がかかるのでアルゴリズムが間違っていると考えることが多いです．それより小さければ大体の場合実行すると一瞬で結果が返ってきます．競プロの大会ではプログラムの実行時間が2秒以内とか1秒以内というように決められているので，悪いアルゴリズムだとたとえ正しい答えを出したとしても点数がもらえません．ちなみに僕はアルゴリズムを良いか悪いかはあまり考えないうちにプログラムを書きはじめ，大体後から修正して複雑なプログラム（俗にスパゲッティーコード）を書くのが得意です．反省．（でも長々として複雑なプログラムでも時間内に実行終了すればOK牧場）&lt;/p&gt;

&lt;h2 id=&#34;let-s-二分探索法&#34;&gt;Let&amp;rsquo;s 二分探索法&lt;/h2&gt;

&lt;h3 id=&#34;二分探索法の前に&#34;&gt;二分探索法の前に&lt;/h3&gt;

&lt;p&gt;良いアルゴリズムの典型的な例として二分探索法というものがあります．これは昇順や降順に値が格納されている配列から特定の値を探し見つけ出すアルゴリズムです．もちろん配列の探索に限らずいろいろな問題を解くときに応用することができます．良いと言っているくらいなので時間計算量が小さいです．しかし，二分探索法をいきなり説明する前に，普通の配列の探索のアルゴリズムについて考えてみてから，二分探索法がいかに良いのかについて考えてみましょう．&lt;/p&gt;

&lt;h3 id=&#34;普通の配列の探索&#34;&gt;普通の配列の探索&lt;/h3&gt;

&lt;p&gt;普通のアルゴリズムは配列を先頭から順にチェックして探してる値じゃなければ次の値をチェック，というものです．Javaのプログラムを示しておきます．（Javaである意味はないです）&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;普通のアルゴリズム(Java)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;public class Futsu {
    public static void main(String[] args) {
        int[] ar = {3,7,10,13,19,20,24};    //探索する配列（昇順）
        int key = 10;               //探す値
        for(int i=0;i&amp;lt;ar.length;i++){
            if(ar[i]==key){
                System.out.println(i+&amp;quot;番目に発見&amp;quot;);
                return;
            }
        }
        System.out.println(&amp;quot;ない&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このプログラムを実行するとコンソールには「2番目に発見」と出力されます．繰り返しの数はiが0,1,2となるので3回です．もし，keyがほかの値ならどうでしょうか．例えば存在しない30だった場合．この時は7回繰り返して配列の最後までチェックして「ない」と出力されます．また，配列に1000個値が格納されている場合には，最大で1000回繰り返す必要があります．このように，この普通のアルゴリズムは最大で配列の大きさと同じ回数繰り返す必要があります．繰り返しの数の最小なのは先頭の値が探す値だった場合で配列の大きさに関係なく1回で終了します．しかし競プロの世界では，実行時間に何秒以内という制限はあっても，何秒以上かけろという制限はないので最小の時間はあまり気にする必要がありません．制限を満たすには，最大を見るべきです．（例の1000個はまだ小さい値なので一瞬で答えが返ってきます．）&lt;/p&gt;

&lt;p&gt;結論として，普通のアルゴリズムでは配列の大きさと同じだけ繰り返しの数が増えます．&lt;/p&gt;

&lt;h2 id=&#34;二分探索法&#34;&gt;二分探索法&lt;/h2&gt;

&lt;p&gt;前節の普通のアルゴリズムを踏まえたうえで，二分探索法について見てみましょう．&lt;/p&gt;

&lt;p&gt;二分探索法は配列が昇順でも降順でも，ある順序に従って格納されている場合にのみ使えます．（デメリットで，順序に並んでいない場合は使えません）まず，配列の真ん中に格納されている要素を見ます．先ほどのプログラムlisting1では13が真ん中にあります．配列は昇順に並んでいるので，もし探している値10が配列に入っているのであれば，13よりは後にあるはずです．よって1回のチェックで調べる範囲をいきなり7個から3個まで減らすことができました．この次も残る3つのうち真ん中をチェックします．この時真ん中にあるのは7です．よって先ほどと同じように，探している10は7よりも後にあるはずです．そして残る値が1つになったのでチェックするとそれが探していた10でプログラムが終了します．さて，繰り返しは3回行いました．普通のプログラムと変わらないです．しかし，この方法であれば存在しない値30を探した場合でも，13（後），20（後），24(後)となり，3回の繰り返しで終了します．この二分探索法では配列の大きさが7の場合は最大でも3回しか繰り返しません．また，配列の大きさが1000の場合でも，最大で10回の繰り返しで終了します．逆に5回の繰り返しでは32個の要素を持った配列を探索することができます．これは，n回の繰り返しで2のn乗の大きさまでの配列を探索できると考えてください．&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://kyumina.github.io/jokenoffline2017/images/bs.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;プログラムを示しますが，多少複雑なのでプログラムは理解しなくてもいいので，アルゴリズムを理解してください．&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;二分探索法(Java)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class BinarySearch {
    public static void main(String[] args) {
        int[] ar = {3,7,10,13,19,20,24};    //探索する配列
        int key = 10;               //探す値
        int upper = ar.length;      //探す範囲の上限
        int lower = 0;              //探す範囲の下限
        int mid;                    //真ん中の値
        while(lower&amp;lt;=upper){
            mid = (lower+upper) / 2;
            if(ar[mid]==key){       //見つけたとき
                System.out.println(mid+&amp;quot;番目に発見&amp;quot;);
                return;
            }else if (ar[mid] &amp;lt; key) {
                lower = mid + 1;    //もっと前
            } else {
                upper = mid - 1;    //もっと後ろ
            }
        }
        System.out.println(&amp;quot;ない&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;最後に，二分探索法の特徴についてまとめておきます．&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;真ん中の要素から調べることで配列を半分ずつに分ける．&lt;/li&gt;
&lt;li&gt;大きな配列でも少ない繰り返し回数で探索することができる．&lt;/li&gt;
&lt;li&gt;順番に並んでいる配列じゃないと使うことができない．&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;おわり&#34;&gt;おわり&lt;/h2&gt;

&lt;p&gt;当たり前ですが，二分探索のほかにもアルゴリズムはたくさんあります．アルゴリズムとデータ構造と検索すればたくさんの本が見つかるので競プロに挑戦するのであれば読んでみてほしいと思います．データ構造というのがついてくるのは，アルゴリズムごとに最適なデータ構造を選択する必要があるので，切っても切り離せないくらい重要な関係だからです．また，本格的に競プロを学びたい場合は，Jokenには俗に蟻本と呼ばれる競プロの神のような人が書いた本があるのでぜひ読んでみてください．&lt;/p&gt;

&lt;p&gt;競プロはスキルアップを必ずサポートしてくれるのでぜひ挑戦してください．&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>